package cs3500.imageprocessing.controller.command;

import org.junit.Test;

import cs3500.imageprocessing.model.ImageModel;
import cs3500.imageprocessing.model.ImageProcessingModel;
import cs3500.imageprocessing.model.Pixel;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;


/**
 * class for testing the Sharpen function object.
 */
public class SharpenTest {
  @Test
  public void testSharpen() {
    ImageModel model = new ImageProcessingModel(5, 5, 255);
    model.setPixel(new Pixel(8, 48, 32), 0, 0);
    model.setPixel(new Pixel(16, 48, 32), 1, 0);
    model.setPixel(new Pixel(24, 24, 32), 2, 0);
    model.setPixel(new Pixel(32, 184, 32), 3, 0);
    model.setPixel(new Pixel(40, 176, 32), 4, 0);
    model.setPixel(new Pixel(48, 168, 32), 0, 1);
    model.setPixel(new Pixel(56, 160, 32), 1, 1);
    model.setPixel(new Pixel(64, 152, 32), 2, 1);
    model.setPixel(new Pixel(72, 144, 32), 3, 1);
    model.setPixel(new Pixel(80, 136, 32), 4, 1);
    model.setPixel(new Pixel(88, 128, 32), 0, 2);
    model.setPixel(new Pixel(96, 120, 32), 1, 2);
    model.setPixel(new Pixel(104, 112, 32), 2, 2);
    model.setPixel(new Pixel(112, 104, 32), 3, 2);
    model.setPixel(new Pixel(120, 96, 32), 4, 2);
    model.setPixel(new Pixel(128, 88, 32), 0, 3);
    model.setPixel(new Pixel(136, 80, 32), 1, 3);
    model.setPixel(new Pixel(144, 72, 32), 2, 3);
    model.setPixel(new Pixel(152, 64, 32), 3, 3);
    model.setPixel(new Pixel(160, 56, 32), 4, 3);
    model.setPixel(new Pixel(168, 48, 32), 0, 4);
    model.setPixel(new Pixel(176, 40, 32), 1, 4);
    model.setPixel(new Pixel(184, 32, 32), 2, 4);
    model.setPixel(new Pixel(192, 16, 32), 3, 4);
    model.setPixel(new Pixel(200, 8, 32), 4, 4);

    new Sharpen().execute(model);

    assertEquals(104, model.getPixelAt(2,2).getRed());
    assertEquals(219, model.getPixelAt(0,3).getRed());
    assertEquals(104, model.getPixelAt(2,2).getRed());
    assertEquals(255, model.getPixelAt(3,3).getRed());
    assertEquals(255, model.getPixelAt(4,3).getRed());

  }


  @Test
  public void testInvalidConstructor() {
    try {
      new Save("test/testLoadFiles/valid2x2.ppm").execute(null);
      fail();
    } catch (IllegalStateException e) {
      assertEquals("provided model is null", e.getMessage());
    }
  }

}